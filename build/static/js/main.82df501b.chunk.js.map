{"version":3,"sources":["components/NavBar.tsx","actions/index.ts","classes/index.ts","models/index.ts","contexts/AppContexts.ts","components/TaskCard.tsx","styles/index.ts","components/SectionCard.tsx","components/TaskContainer.tsx","reducers/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","component","fontFamily","ADD_SECTION","ADD_TASK","DELETE_TASK","DELETE_SECTION","CHANGE_CATEGORY","MOVE_TASK","Task","id","taskName","taskDetail","this","newId","newName","newDetail","TaskSection","sectionName","taskList","getTaskList","newList","length","newTask","push","deleteId","filter","task","getId","TaskManager","taskSectionList","getTaskSectionList","newCard","taskSection","manager","initialState","AppContext","createContext","state","dispatch","TaskCard","taskId","sectionId","useContext","Card","draggable","onDragStart","e","data","target","getAttribute","console","log","dataTransfer","setData","effectAllowed","width","marginTop","marginBottom","alignItems","data-id","index","Grid","container","justifyContent","spacing","CardContent","getTaskName","getTaskDetail","IconButton","aria-label","onClick","preventDefault","type","style","top","left","transform","bgcolor","border","boxShadow","p","formStyle","margin","SectionCard","props","category","getSectionName","useState","section","setSection","title","setTitle","detail","setDetail","isInputSectionBlank","isSectionBlank","isInputFormBlank","React","open","setOpen","handleClose","item","className","flexDirection","padding","marginLeft","toString","onDragOver","onDrop","targetFrom","getData","targetTo","data-to","TextareaAutosize","placeholder","onChange","value","Button","newCategory","document","querySelector","cssText","disabled","map","CardActions","Modal","onClose","aria-labelledby","aria-describedby","direction","TextField","label","newTaskName","newTaskDetail","TaskContainer","rowSpacing","columnSpacing","size","reducer","action","newSection","getLength","addTaskSection","newSectionList","setTaskSectionList","getSection","addTaskList","newTaskList","setTaskList","setSectionName","getTask","split","setTaskName","setTaskDetail","fromList","targetTask","splice","setId","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.82df501b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box, AppBar, Toolbar, Typography } from \"@mui/material\";\n\nconst NavBar = () => {\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, fontFamily: \"fantasy\" }}>\n                        Task Management App\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n};\n\nexport default NavBar;\n","export const ADD_SECTION = \"ADD_SECTION\";\nexport const ADD_TASK = \"ADD_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const DELETE_SECTION = \"DELETE_SECTION\";\nexport const CHANGE_CATEGORY = \"CHANGE_CATEGORY\";\nexport const CHANGE_TASK_NAME = \"CHANGE_TASK_NAME\";\nexport const CHANGE_TASK_DETAIL = \"CHANGE_TASK_DETAIL\";\nexport const MOVE_TASK = \"MOVE_TASK\";\n","export class Task {\n    private id: string;\n    private taskName: string | undefined;\n    private taskDetail: string | undefined;\n    constructor(id: string = \"\", taskName?: string | undefined, taskDetail?: string | undefined) {\n        this.id = id;\n        this.taskName = taskName;\n        this.taskDetail = taskDetail;\n    }\n    public getId(): string | undefined {\n        if (this.id) return this.id;\n        else return undefined;\n    }\n    public getTaskName(): string | undefined {\n        if (this.taskName) return this.taskName;\n        else return undefined;\n    }\n    public getTaskDetail(): string | undefined {\n        if (this.taskDetail) return this.taskDetail;\n        else return undefined;\n    }\n    public setId(newId: string): void {\n        this.id = newId;\n    }\n    public setTaskName(newName: string): void {\n        this.taskName = newName;\n    }\n    public setTaskDetail(newDetail: string): void {\n        this.taskDetail = newDetail;\n    }\n}\n\nexport class TaskSection {\n    private id: number;\n    private sectionName: string;\n    private taskList: Task[];\n    constructor(id: number, sectionName: string = \"\", taskList?: Task[]) {\n        this.id = id;\n        this.sectionName = sectionName;\n        if (taskList) this.taskList = taskList;\n        else this.taskList = [];\n    }\n    public getId(): number {\n        return this.id;\n    }\n    public getSectionName(): string | undefined {\n        if (this.sectionName) return this.sectionName;\n        else return undefined;\n    }\n    public getTaskList(): Task[] {\n        return this.taskList;\n    }\n    public getTask(id: number): Task {\n        return this.getTaskList()[id - 1];\n    }\n    public setId(newId: number): void {\n        this.id = newId;\n    }\n    public setTaskList(newList: Task[]): void {\n        this.taskList = newList;\n    }\n    public setSectionName(newName: string): void {\n        this.sectionName = newName;\n    }\n    public getLength(): number {\n        return this.taskList.length;\n    }\n    public addTaskList(newTask: Task): void {\n        this.taskList.push(newTask);\n    }\n    public deleteTask(deleteId: string): void {\n        this.taskList = this.taskList.filter((task) => task.getId() !== deleteId);\n    }\n}\n\nexport class TaskManager {\n    private taskSectionList: TaskSection[];\n    constructor(taskSectionList?: TaskSection[]) {\n        if (taskSectionList) this.taskSectionList = taskSectionList;\n        else this.taskSectionList = [];\n    }\n    public getTaskSectionList(): TaskSection[] {\n        return this.taskSectionList;\n    }\n    public getSection(id: number): TaskSection {\n        return this.getTaskSectionList()[id - 1];\n    }\n    public setTaskSectionList(newList: TaskSection[]): void {\n        this.taskSectionList = newList;\n    }\n    public getLength(): number {\n        return this.taskSectionList.length;\n    }\n    public addTaskSection(newCard: TaskSection) {\n        this.taskSectionList.push(newCard);\n    }\n    public deleteTaskSection(deleteId: number): void {\n        this.taskSectionList = this.taskSectionList.filter((taskSection) => taskSection.getId() !== deleteId);\n    }\n}\n","import { TaskManager } from \"../classes\";\n\nexport const manager = new TaskManager();\n","import { createContext } from \"react\";\nimport { TaskManager } from \"../classes\";\nimport { manager } from \"../models\";\n\ntype Context = {\n    state: TaskManager;\n    dispatch: React.Dispatch<any>;\n};\n\nconst initialState = manager;\nexport const AppContext = createContext<Context>({ state: initialState, dispatch: () => {} });\n","import React, { useContext } from \"react\";\nimport { Card, CardContent, Grid, IconButton, Typography } from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { Task } from \"../classes\";\nimport { DELETE_TASK } from \"../actions\";\nimport { AppContext } from \"../contexts/AppContexts\";\nimport { MOVE_TASK } from \"../actions\";\ninterface TaskCardProps {\n    task: Task;\n    category: string | undefined;\n    sectionId: number;\n    index: string;\n}\n\nconst TaskCard: React.FC<TaskCardProps> = (task) => {\n    const taskId = task.task.getId()!;\n    const sectionId = task.sectionId;\n\n    const { dispatch } = useContext(AppContext);\n    const deleteTask = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        dispatch({ type: DELETE_TASK, sectionId, taskId });\n    };\n\n    const startDrag = (e: React.DragEvent) => {\n        const target = e.target as HTMLElement;\n        const data = target.getAttribute(\"data-id\");\n        console.log(data);\n        e.dataTransfer.setData(\"text/plain\", data!);\n        e.dataTransfer.effectAllowed = \"move\";\n    };\n\n    return (\n        <Card draggable=\"true\" onDragStart={startDrag} sx={{ width: 260, marginTop: 1, marginBottom: 1, alignItems: \"center\" }} data-id={task.index}>\n            <Grid container data-id={task.index}>\n                <Grid container justifyContent=\"flex-start\" spacing={1} data-id={task.index}>\n                    <CardContent data-id={task.index}>\n                        <Typography>Title:{task.task.getTaskName()}</Typography>\n                        <Typography>Detail:{task.task.getTaskDetail()}</Typography>\n                        <IconButton aria-label=\"delete\" onClick={deleteTask}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </Card>\n    );\n};\n\nexport default TaskCard;\n","export const style = {\n    position: \"absolute\" as \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 400,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n};\n\nexport const formStyle = {\n    margin: \"10px\",\n};\n","import React, { useContext, useState } from \"react\";\nimport { Box, Button, Card, CardActions, Grid, IconButton, Modal, TextareaAutosize, TextField, Typography } from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport AddTaskIcon from \"@mui/icons-material/AddTask\";\nimport TaskCard from \"./TaskCard\";\nimport { TaskSection } from \"../classes\";\nimport { AppContext } from \"../contexts/AppContexts\";\nimport { ADD_TASK, DELETE_SECTION, CHANGE_CATEGORY, MOVE_TASK } from \"../actions\";\nimport { style, formStyle } from \"../styles\";\n\ninterface TaskSectionProps {\n    props: TaskSection;\n}\n\nconst SectionCard: React.FC<TaskSectionProps> = (props) => {\n    const sectionId = props.props.getId();\n    const category = props.props.getSectionName();\n\n    const [section, setSection] = useState(\"\");\n    const [title, setTitle] = useState(\"\");\n    const [detail, setDetail] = useState(\"\");\n\n    const { dispatch } = useContext(AppContext);\n\n    const isInputSectionBlank = section === \"\";\n    const isSectionBlank = !category;\n    const isInputFormBlank = title === \"\" || detail === \"\";\n\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const addTask = (e: React.MouseEvent) => {\n        e.preventDefault();\n        dispatch({ type: ADD_TASK, sectionId, newTaskName: title, newTaskDetail: detail });\n        setTitle(\"\");\n        setDetail(\"\");\n        handleClose();\n    };\n\n    const deleteSection = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        dispatch({ type: DELETE_SECTION, sectionId });\n    };\n\n    const addSection = (e: any) => {\n        e.preventDefault();\n        dispatch({ type: CHANGE_CATEGORY, sectionId, newCategory: section });\n        let input = document.querySelector(`#input-${sectionId.toString()}`) as HTMLElement;\n        input.style.cssText = \"display: none\";\n    };\n\n    const overDrag = (e: React.DragEvent) => {\n        e.preventDefault();\n    };\n\n    const drop = (e: React.DragEvent) => {\n        const target = e.target as HTMLElement;\n        const targetFrom = e.dataTransfer.getData(\"text/plain\");\n        const targetTo = target.getAttribute(\"data-to\");\n        if (targetTo) dispatch({ type: MOVE_TASK, targetFrom, targetTo });\n    };\n\n    return (\n        <>\n            <Grid item justifyContent=\"center\" className=\"tasks\">\n                <Card sx={{ width: 230, flexDirection: \"column\", padding: 2, marginTop: 2, marginLeft: 1 }} id={sectionId.toString()} onDragOver={overDrag} onDrop={drop} data-to={sectionId}>\n                    <Grid container justifyContent=\"center\" data-to={sectionId}>\n                        <div id={`input-${sectionId.toString()}`}>\n                            <TextareaAutosize aria-label=\"empty textarea\" placeholder=\"Section\" style={{ width: 220 }} onChange={(e) => setSection(e.target.value)} data-to={sectionId} />\n                            <Button style={formStyle} variant=\"contained\" onClick={addSection} disabled={isInputSectionBlank}>\n                                Add Section\n                            </Button>\n                        </div>\n                        <Typography variant=\"h5\" data-to={sectionId}>\n                            {category}\n                        </Typography>\n                        {props.props.getTaskList().map((task, index) => (\n                            <TaskCard key={index} task={task} category={category} sectionId={sectionId} index={`${sectionId}-${index + 1}`} />\n                        ))}\n                        <Grid container justifyContent=\"flex-start\" data-to={sectionId}>\n                            <CardActions>\n                                <IconButton aria-label=\"addContents\" onClick={handleOpen} disabled={isSectionBlank} data-to={sectionId}>\n                                    <AddTaskIcon />\n                                </IconButton>\n                                <IconButton aria-label=\"delete\" onClick={deleteSection} data-to={sectionId}>\n                                    <DeleteIcon />\n                                </IconButton>\n                            </CardActions>\n                        </Grid>\n                    </Grid>\n                </Card>\n            </Grid>\n            <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Grid container direction=\"column\" alignItems=\"flex-start\">\n                        <TextField style={formStyle} id=\"standard-basic\" label=\"Title\" variant=\"standard\" onChange={(e) => setTitle(e.target.value)} />\n                        <TextField style={formStyle} id=\"standard-basic\" label=\"Detail\" variant=\"standard\" onChange={(e) => setDetail(e.target.value)} />\n                        <Button style={formStyle} variant=\"contained\" onClick={addTask} disabled={isInputFormBlank}>\n                            Add Task\n                        </Button>\n                    </Grid>\n                </Box>\n            </Modal>\n        </>\n    );\n};\n\nexport default SectionCard;\n","import React, { useContext } from \"react\";\nimport SectionCard from \"./SectionCard\";\nimport { Button, Grid } from \"@mui/material\";\nimport { AppContext } from \"../contexts/AppContexts\";\nimport { ADD_SECTION } from \"../actions\";\n\nconst TaskContainer: React.FC = () => {\n    const { state, dispatch } = useContext(AppContext);\n    const addSection = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        dispatch({ type: ADD_SECTION });\n    };\n    return (\n        <Grid container rowSpacing={4} columnSpacing={4}>\n            {state.getTaskSectionList().map((taskSection, index) => (\n                <SectionCard key={index} props={taskSection} />\n            ))}\n            <Grid item margin={2}>\n                <Button size=\"small\" onClick={addSection}>\n                    Add Section\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default TaskContainer;\n","import { ADD_SECTION, DELETE_SECTION, ADD_TASK, DELETE_TASK, CHANGE_CATEGORY, MOVE_TASK, CHANGE_TASK_NAME, CHANGE_TASK_DETAIL } from \"../actions\";\nimport { Task, TaskManager, TaskSection } from \"../classes\";\n\nconst reducer = (state: TaskManager, action: { type: string; id?: number; sectionId?: number; taskId?: string; newCategory?: string; newTaskName?: string; newTaskDetail: string; targetFrom?: string; targetTo?: string }) => {\n    switch (action.type) {\n        case ADD_SECTION:\n            const newSection = new TaskSection(state.getLength() + 1, \"\", []);\n            state.addTaskSection(newSection);\n            return new TaskManager(state.getTaskSectionList());\n        case DELETE_SECTION:\n            const newSectionList = state.getTaskSectionList().filter((section) => section.getId() !== action.sectionId!);\n            state.setTaskSectionList(newSectionList);\n            return new TaskManager(state.getTaskSectionList());\n        case ADD_TASK:\n            const newTask = new Task(`${action.sectionId!}-${state.getSection(action.sectionId!).getLength() + 1}`, action.newTaskName!, action.newTaskDetail!);\n            state.getSection(action.sectionId!).addTaskList(newTask);\n            return new TaskManager(state.getTaskSectionList());\n        case DELETE_TASK:\n            const newTaskList = state\n                .getSection(action.sectionId!)\n                .getTaskList()\n                .filter((task) => task.getId() !== action.taskId!);\n            state.getSection(action.sectionId!).setTaskList(newTaskList);\n            return new TaskManager(state.getTaskSectionList());\n        case CHANGE_CATEGORY:\n            state.getSection(action.sectionId!).setSectionName(action.newCategory!);\n            return new TaskManager(state.getTaskSectionList());\n        case CHANGE_TASK_NAME:\n            state\n                .getSection(action.sectionId!)\n                .getTask(+action.taskId!.split(\"-\")[1]!)\n                .setTaskName(action.newTaskName!);\n            return new TaskManager(state.getTaskSectionList());\n        case CHANGE_TASK_DETAIL:\n            state\n                .getSection(action.sectionId!)\n                .getTask(+action.taskId!.split(\"-\")[1]!)\n                .setTaskDetail(action.newTaskDetail!);\n            return new TaskManager(state.getTaskSectionList());\n        case MOVE_TASK:\n            const fromList = action.targetFrom!.split(\"-\");\n            const target = action.targetTo;\n            const targetTask = state\n                .getSection(+fromList[0])\n                .getTaskList()\n                .splice(+fromList[1] - 1, 1);\n            console.log(\"targetTask\");\n            console.log(\"targetTask\");\n            console.log(targetTask);\n            targetTask[0].setId(target!);\n            state.getSection(+target!).addTaskList(targetTask[0]);\n            return new TaskManager(state.getTaskSectionList());\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import { useReducer } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport TaskContainer from \"./components/TaskContainer\";\nimport { AppContext } from \"./contexts/AppContexts\";\nimport reducer from \"./reducers\";\nimport { manager } from \"./models\";\nimport \"./app.css\";\n\nexport default function App() {\n    const [state, dispatch] = useReducer(reducer, manager);\n    return (\n        <AppContext.Provider value={{ state, dispatch }}>\n            <NavBar />\n            <TaskContainer />\n        </AppContext.Provider>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}